рекомендуемые параметры для виртуальной машины (ни больше, ни меньше): архитектура x86_64, 2x vCPU, 768MB RAM, disk, network: VirtIO

пароль учетной записи root: rit2016

план работы:
1. открыть 3 консоли, и во всех консолях зайти на виртуалку по ssh. первая консоль для запуска скриптов, вторая для просмотра логов, третья для запуска других тулз
2. выполнить следующие команды:
   su - postgres
   cd rit-2016-pgdb-tutorial/
Все дальнейшие скрпты запускаются из этого каталога.
2. запускаем скрипт 01-init.sh который ...
3. запускаем скрипт 02-fill-test-data.sh который создает тестовые данные (время работы ~1 мин.)
4. запускаем скрипт 03-checkpoints-test.sh который запускает тесты с чекпоинтами, во второй консоли запускам тайл лога, в третьей - "iostat - x 1"
   на что смотреть?
   - первый пгбенч выполняется с "плохими" настройками чекпоинтов, это выражается в том что все чекпоинты запускаются как xlog
   - по итогу первого пгбенча он не сможет выполнить кол-во транзакций на уровне 900 tps
   - второй пгбенч выполняется с "хорошими" настройками чекпоинтов, это выражается в том что чекпоинты запускаются реже и как time
   - по итогу второго пгбенча он выполнит кол-во транзакций на уровне 900 tps и латенси будет лучше чем у первого пгбенча
5. запускаем скрипт 04-too-many-conns.sh который запускает тесты с где кончаются коннекты, во второй консоли запускам тайл лога, в третьей пгцентр (смотрим шапку)
   на что смотреть?
   - в тайле лога мы увидим характерные ошибки когда не хватает коннектов
   - в пгцентре, в шапке можно отслеживать кол-во коннектов
6. запускаем скрипт 05-broken-conns.sh который запускает тесты с битыми коннектами, во второй консоли запускам тайл лога, в третьей пгцентр (смотрим шапку, 'a')
   на что смотреть?
   - в тайле лога будут характерные для блокировок ошибки
   - в пгцентре можно увидеть idle транзакции ('a')
7. запускаем скрипт 06-bloat.sh который запускает тесты с таблицей и автовакуумом, во второй консоли запускам тайл лога, в третьей пгцентр (смотрим 's', 't')
   на что смотреть?
   - перед началом запоминаем размер тестовой таблицы, процент занимаемых ею буферов
   - затем следует 2 пгбенча, после каждого смотрим теже метрики (размер и процент увеличатся)
   - пока идет пгбенч, смотрим пгцентр как растет размер ('s') и кол-во апдейтов в секунду ('t')
   - затем следует второй цикл пгбенча с включенным агрессивным вакуумом... там размер и процент практически не увеличиваются (в пгцентре отмечаем что регулярно работают вакуумы)
8. запускаем скрипт 07-broken-xlog.sh который запускает тест с ломанием archive_command, во второй консоли запускаем таил лога с грепом по фразе checkpoint, в третьей консоли запускаем таил лога с грепом -v checkpoint (для отслеживания ошибок архивации)
   на что смотреть?
   - первый проход пгбенча работает обычно, смотреть нечего
   - после ломания archive_command, смотрим на ошибки в одном окне логов
   - сравниваем стату которая выводится после пгбенчей, на failed_count и размер pg_xlog
   - после починки archive_command, смотрим на размер pg_xlog и стату выполнения чекпоинтов
9. запускаем скрипт 08-sequential-scan.sh который запускает тест с сек-сканом, во второй консоли запускаем pgcenter (смотрим 't', 'T', 'i')
   на что смотреть?
   - в первом проходе пгбенча смотрим пгцентр ('t', 'T', 'i') стату по сексканам
   - в первом проходе пгбенча снова смотрим пгцентр ('t', 'T', 'i') стату по индекссканам
   - сравниваем tps и latency между первым и вторым пгбенчем
10.запускаем скрипт 09-work-mem.sh который запускает тест с запросами которые создают temp files, во второй консоли запускаем  таил лога и смотрим сообщения о создании файлов, в третьей запускаем pgcenter (смотрим 'v')
   на что смотреть?
   - в первом проходе пгбенча смотрим лог сообщения о создании временных файлов
   - в пгцентре смотрим 'v' стату создания временных файлов
   - во втором прогоне пгцента смотрим туда же, временных файлов там уже не будет
   - сравниваем tps и latency между первым и вторым пгбенчем
